from agency_swarm.tools import BaseTool
from pydantic import Field
import os
from dotenv import load_dotenv
import anthropic
from datetime import datetime
import json

load_dotenv()

client = anthropic.Anthropic(api_key=os.getenv("ANTHROPIC_API_KEY"))

class DocumentGenerator(BaseTool):
    """
    Tool for generating comprehensive construction documents using Claude AI.
    Creates detailed, properly formatted documents based on all collected project information.
    """
    
    project_data: dict = Field(
        ..., 
        description="Consolidated project data including requirements, technical specs, compliance, and costs"
    )
    document_type: str = Field(
        ..., 
        description="Type of document to generate"
    )

    def run(self):
        """Generate a detailed construction document"""
        try:
            # Create document-specific prompt based on type
            prompt = self._create_document_prompt()
            
            # Generate document using Claude
            message = client.messages.create(
                model="claude-3-opus-20240229",
                max_tokens=4096,
                temperature=0.7,
                system="You are an expert construction documentation specialist. Generate detailed, properly formatted documents following industry standards.",
                messages=[{"role": "user", "content": prompt}]
            )

            # Process and format the generated content
            document_content = self._format_document(message.content[0].text)
            
            # Save document to file system
            self._save_document(document_content)

            return {
                "status": "success",
                "content": document_content,
                "document_type": self.document_type,
                "timestamp": datetime.now().isoformat()
            }

        except Exception as e:
            return {
                "status": "error",
                "message": f"Failed to generate document: {str(e)}"
            }

    def _create_document_prompt(self):
        """Create specific prompt based on document type"""
        base_prompt = f"""Generate a detailed {self.document_type} document for the following construction project:

Project Data:
{json.dumps(self.project_data, indent=2)}

Please provide a comprehensive, properly formatted document that includes:"""

        type_specific_prompts = {
            "requirements": """
1. Executive Summary
2. Project Overview
3. Functional Requirements
4. Technical Requirements
5. Performance Requirements
6. Constraints and Limitations
7. Assumptions and Dependencies
8. Success Criteria""",
            
            "specifications": """
1. General Information
2. Material Specifications
3. Construction Methods
4. Quality Requirements
5. Testing and Inspection
6. Safety Requirements
7. Environmental Considerations
8. Execution Requirements""",
            
            "compliance": """
1. Regulatory Overview
2. Building Code Compliance
3. Zoning Requirements
4. Permit Status
5. Environmental Compliance
6. Safety Compliance
7. Insurance Requirements
8. Risk Assessment""",
            
            "cost": """
1. Executive Summary
2. Cost Breakdown
3. Material Costs
4. Labor Costs
5. Equipment Costs
6. Overhead and Profit
7. Contingency
8. Payment Schedule""",
        }

        return base_prompt + type_specific_prompts.get(
            self.document_type,
            "\n1. Executive Summary\n2. Detailed Content\n3. Conclusions"
        )

    def _format_document(self, content):
        """Format the document with proper headers, sections, and styling"""
        # Add document header
        header = f"""
{self.document_type.upper()} DOCUMENT
Project: {self.project_data.get('project_name', 'Unnamed Project')}
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Status: Final Draft
        
"""
        # Add footer
        footer = f"""

Generated by Construction Documentation System
Last Updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Document ID: {self.document_type}-{datetime.now().strftime('%Y%m%d%H%M%S')}
"""
        
        return header + content + footer

    def _save_document(self, content):
        """Save the document to the file system"""
        docs_dir = os.path.join('generated_documents', datetime.now().strftime('%Y%m%d'))
        os.makedirs(docs_dir, exist_ok=True)
        
        filename = f"{self.document_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        filepath = os.path.join(docs_dir, filename)
        
        with open(filepath, 'w') as f:
            f.write(content)

if __name__ == "__main__":
    generator = DocumentGenerator(
        project_data={
            "project_name": "Luxury Deck",
            "requirements": "Gold plating with diamond inlays...",
            "technical_specs": "Material specifications...",
            "compliance": "Building code requirements...",
            "costs": "Budget breakdown..."
        },
        document_type="specifications"
    )
    result = generator.run()
    print(result)